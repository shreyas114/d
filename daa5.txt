// Design n-Queens matrix having first Queen placed. Use backtracking to place remaining Queens to generate the final n-queenâ€™s matrix.
#include<bits/stdc++.h>
using namespace std;

void addSolution(vector<vector<int>>&board,int n)
{
    vector<int>temp;
    for(int i = 0;i<n;i++)
    {
        for(int j = 0;j<n;j++)
        {
            temp.push_back(board[i][j]);
            cout<<board[i][j];
        }
        cout<<endl;
    }
    cout<<endl;

}

bool isSafe(int row,int col,vector<vector<int>>&board,int n)
{
    int x = row;
    int y = col;
    
    while(y>=0)
    {
        if(board[x][y]==1)return false;
        y--;
        
    }
    
    x = row;
    y = col;
    
    while(x>=0&&y>=0)
    {
        if(board[x][y]==1)return false;
        x--;y--;
    }
    
    x = row;
    y = col;
    
    while(x<n && y>=0)
    {
        if(board[x][y]==1)return false;
        x++;y--;
    }
    return true;
}

void solve(int col,vector<vector<int>>&board,int n)
{
    if(col==n)
    {
        addSolution(board,n);
        return;
    }
    
    for(int row = 0;row <n;row++)
    {
        if(isSafe(row,col,board,n))
        {
            board[row][col] = 1;
            solve(col+1,board,n);
            board[row][col] = 0;
        }
    }
}

void nQueens(int n)
{
    vector<vector<int>>board(n,vector<int>(n,0));
    solve(0,board,n);
}

int main()
{
    int n;
    cout<<"Size of board : ";
    cin>>n;
    nQueens(n);
    return 0;
    
}